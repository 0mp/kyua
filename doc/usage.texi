@c Copyright 2011 Google Inc.
@c All rights reserved.
@c
@c Redistribution and use in source and binary forms, with or without
@c modification, are permitted provided that the following conditions are
@c met:
@c
@c * Redistributions of source code must retain the above copyright
@c   notice, this list of conditions and the following disclaimer.
@c * Redistributions in binary form must reproduce the above copyright
@c   notice, this list of conditions and the following disclaimer in the
@c   documentation and/or other materials provided with the distribution.
@c * Neither the name of Google Inc. nor the names of its contributors
@c   may be used to endorse or promote products derived from this software
@c   without specific prior written permission.
@c
@c THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
@c "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
@c LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
@c A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
@c OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
@c SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
@c LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
@c DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
@c THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
@c (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
@c OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@node Usage
@chapter Usage

@cindex usage

Kyua provides a command-line interface through the @command{kyua}
binary distributed with the @samp{kyua-cli} package.

The interface of the @command{kyua} binary follows that of a
traditional subcommand-based interface.  The generic usage form is:

@verbatim
$ kyua [common_options] subcommand [options] [arguments]
@end verbatim

The following sections describe what the available options and
commands are.  Note that the @command{kyua} tool is self-descriptive;
help can be obtained from the command line by using the @command{help}
subcommand; @xref{help command}.

@menu
* Common options:: Options that apply to all commands.
* Subcommands:: Description of the available commands and their options.
* Environment variables:: User-tunable varibles.
@end menu

@node Common options
@section Common options

The following options are recognized by all the subcommands offered by
@command{kyua}.  Note that these must be specified before the
subcommand name.

@table @option

@item --config=path
@cindex @option{--config}
Specifies the configuration to process.  Defaults to a
@file{~/.kyua/kyua.conf} if it exists, otherwise to
@file{@value{KYUA_CONFDIR}/kyua.conf}.  None of the default files has
to exist, but any user explicitly specified has to.

The special value @samp{none} requests that no configuration files be
loaded.  Overrides can still be provided through the @option{--variable}
flag.

@item --logfile=path
@cindex @option{--logfile}
Specifies the location of the file to which @command{kyua} will log
run-time events useful for postmortem debugging.  The default depends
on different environment variables but, usually, the log file will be
stored within the user's home directory.  @xref{Log file location}.

@item --loglevel=level
@cindex @option{--loglevel}
Specifies the logging level.  The default is @samp{info}.  @xref{Log
levels}.

@item --variable=name=value
@cindex @option{--variable}
Sets the @samp{name} configuration variable to @samp{value}.  The
variable can either be a builtin variable for Kyua or a test-suite
specific variable.

@end table

@node Subcommands
@section Subcommands

@menu
Commands list
* about command:: Details about the about command.
* config command:: Details about the config command.
* db-exec command:: Details about the db-exec command.
* debug command:: Details about the debug command.
* help command:: Details about the help command.
* list command:: Details about the list command.
* report command:: Details about the report command.
* test command:: Details about the test command.

Miscellaneous topics
* Filters:: Specifying filters for test programs and test cases.
@end menu

@node about command
@subsection The about command

@cindex @command{about}

The @command{about} command provides generic information about the
@samp{kyua-cli} package.  In the default form (no arguments), the
information printed includes: the name of the package
(@samp{kyua-cli}), the version number (@value{VERSION}), license
information, authors information and a link to the project web site.

@cindex about topics
The user can customize the information printed by the @command{about}
command by specifiying the a topic as an argument to the command; this
argument can be one of:

@table @samp
@item authors
Displays the list of authors and contributors only.

@item license
Displays the license information and the list of copyrights.

@item version
Displays the package name and the version number in a format that is
compatible with the output of GNU tools that support a
@option{--version} flag.  Use this whenever you have to query the
version number of the package.
@end table

@node config command
@subsection The config command

@cindex @command{config}

The @command{config} command provides a way to list all defined
configuration variables and their current values.

This command is intended to help the user in resolving the values of
the configuration variables without having to scan over configuration
files.

In the default form (no arguments), the command prints all
configuration variables and returns 0 for success.

If any arguments are provided, the command will only print the
requested variables.  If any particular variable is not defined, the
command will return 1 for error.

@node db-exec command
@subsection The db-exec command

@cindex @command{db-exec}

The @command{db-exec} command provides a way to execute an arbitrary
SQL statement within the database.  This command is mostly intended to
aid in debugging, but can also be used to extract information from the
database when the current interfaces do not provide the desired
functionality.

The @command{db-exec} command takes one or more arguments, all of
which are concatenated to form a single SQL statement.  Once the
staement is executed, @command{db-exec} will print the resulting table
on the screen, if any.  The command returns 0 on success, or 1 if
anything went wrong.

The following subcommand options are recognized:

@table @option
@item --no-headers
@cindex @option{--no-headers}, @command{db-exec}
Avoids printing the headers of the table in the output of the command.

@item --store=path
@cindex @option{--store}, @command{db-exec}
Specifies the database to use.  Defaults to @file{~/.kyua/store.db}.
The database is created if it does not exist.
@end table

@node debug command
@subsection The debug command

@cindex @command{debug}

The @command{debug} command provides a mechanism to execute a single test
case bypassing some of the Kyua infrastructure and allowing the user to
poke into the execution behavior of the test.

The @command{debug} command prints the result of the test case as the
last line of its output, and exits with 0 if the test case finished
successfuly or 1 if the test case failed or the engine encountered an
error processing the test case or user input.

At the moment, the @command{debug} command allows the following
aspects of a test case execution to be tweaked:

@itemize
@item
Redirection of the test case's stdout and stderr to the console (the
default) or to arbitraty files.  See the @option{--stdout} and
@option{--stderr} options below.
@end itemize

The following subcommand options are recognized:

@table @option
@item --kyuafile=path
@cindex @option{--kyuafile}, @command{debug}
Specifies the Kyuafile to process.  Defaults to a @file{Kyuafile} file
in the current directory.

@item --stderr=path
@cindex @option{--stderr}, @command{debug}
Specifies the file to which to send the standard error of the test
program's body.  The default is @file{/dev/stderr}, which is a special
that redirects the output to the console.

@item --stdout=path
@cindex @option{--stdout}, @command{debug}
Specifies the file to which to send the standard output of the test
program's body.  The default is @file{/dev/stdout}, which is a special
that redirects the output to the console.
@end table

For example, suppose the following Kyua session:

@cindex example, debug

@verbatim
$ kyua test
kernel/fs:mkdir  ->  passed
kernel/fs:rmdir  ->  failed: Invalid argument

1/2 passed (1 failed)
@end verbatim

At this point, we do not have a lot of information regarding the
failure of the @samp{kernel/fs:rmdir} test.  We could run this test
through the @command{debug} command to inspect its output a bit
closer, hoping that the test case is kind enough to log its progress:

@verbatim
$ kyua debug kernel/fs:rmdir
Trying rmdir('foo')
Trying rmdir(NULL)
kernel/fs:rmdir  ->  failed: Invalid argument
@end verbatim

Luckily, the offending test case was printing status lines as it
progressed, so we could see the last attempted call and we can know
match the failure message to the problem.

@node help command
@subsection The help command

@cindex @command{help}

The @command{help} command provides interactive help on all supported
commands and options.  If, for some reason, you happen to spot a
discrepancy in the output of this command and this document, the
command is the authoritative source of information.

If no arguments are provided to @command{help}, the command prints the
list of common options (@pxref{Common options}) and the list of
supported subcommands.

If a single argument is provided to @command{help}, this single
argument is the name of a valid subcommand.  In that case,
@command{help} prints a textual description of the command, the list
of common options (@pxref{Common options}) and the list of
subcommand-specific options.

@node list command
@subsection The list command

@cindex @command{list}

The @command{list} command scans all the test programs and test cases
in a test suite and prints a list of all their names, optionally
accompanied by any metadata properties they have.

The user can provide filters on the test cases to list by specifying
such filters as arguments; @ref{Filters}.

This command must be run within a test suite (i.e. a directory
containing a @file{Kyuafile}) or a test suite must be provided with
the @option{--kyuafile} flag.

The following subcommand options are recognized:

@table @option
@item --kyuafile=path
@cindex @option{--kyuafile}, @command{list}
Specifies the Kyuafile to process.  Defaults to a @file{Kyuafile} file
in the current directory.

@item --verbose
@cindex @option{--verbose}, @command{list}
Prints metadata properties for every test case.
@end table

This command exits with @samp{0} if there are no problems processing
the test suite, or with any positive number if the test suite is
invalid in any sense or if the filters matched no tests.

@node report command
@subsection The report command

@cindex @command{report}

The @command{report} command provides the main mechanism to generate
reports of the execution of a test suite.  The command processes an
action stored in the database and then creates a textual summary of
the test case results recorded in that action.

The following subcommand options are recognized:

@table @option
@item --action=identifier
@cindex @option{--action}, @command{report}
Specifies the action for which to generate a report.  If not provided,
defaults to the latest action stored in the database.

@item --output=format:path
@cindex @option{--output}, @command{report}
Specifies the format of the generated report and where it should be
stored in the form @samp{format:path}.  At the moment, the only format
type is @samp{console}.

@item --results-filter=types
@cindex @option{--results-filter}, @command{report}
Comma-separated list of the test result types to include in the
report.  The ordering of the values is respected so that you can
determine how you want the list of tests to be shown.

The valid values are: @samp{broken}, @samp{failed}, @samp{passed},
@samp{skipped} and @samp{xfail}.  If the parameter supplied to the
option is empty, filtering is suppressed and all result types are
shown in the report.

The default value for this flag includes all the test results except
the passed tests.  Showing the passed tests by default clutters the
report with too much information, so only abnormal conditions are
included.

@item --show-context
@cindex @option{--show-context}, @command{report}
Prints the runtime context of the action.

@item --store=path
@cindex @option{--store}, @command{db-exec}
Specifies the database to use.  Defaults to @file{~/.kyua/store.db}.
The database is created if it does not exist.
@end table

@node test command
@subsection The test command

@cindex @command{test}

The @command{test} command runs the tests of a test suite and reports
results in a primitive manner only intended for progress reporting.
@c TODO(jmmv): Describe how to gather reports once we implement this.
At the moment, it is not possible to generate any other kind of
reports out of the results of the execution.  This feature will be
implemented later.

The user can provide filters on the test cases to run by specifying
such filters as arguments; @ref{Filters}.

This command must be run within a test suite (i.e. a directory
containing a @file{Kyuafile}) or a test suite must be provided with
the @option{--kyuafile} flag.

The following subcommand options are recognized:

@table @option
@item --kyuafile=path
@cindex @option{--kyuafile}, @command{test}
Specifies the Kyuafile to process.  Defaults to a @file{Kyuafile} file
in the current directory.

@item --store=path
@cindex @option{--store}, @command{test}
Specifies the database to use.  Defaults to @file{~/.kyua/store.db}.
The database is created if it does not exist.
@end table

@node Filters
@subsection Filters for test programs and test cases

@cindex filter
A filter is a string that is used to match test cases or test programs
in a test suite.  Filters have the following form:

@verbatim
test_program_name[:test_case_name]
@end verbatim

Where @samp{test_program_name} is the name of a test program or a
subdirectory in the test suite, and @samp{test_case_name} is the name
of a test case.

@node Environment variables
@section Environment variables

@cindex environment
@cindex environment variables

The following environment variables are recognized by @command{kyua}
and you may change them to suit your preferences:

@table @env
@item HOME
@cindex HOME
Path to the user's home directory.  @command{kyua} uses this location
to determine paths to configuration files and default log files.

@item TMPDIR
@cindex TMPDIR
Path to the system-wide temporary directory.  @command{kyua} uses this
location to place the work directory of test cases, among other
things.

The default for this variable depends on the operating system.  In
general, it is @file{/tmp}.
@end table

@command{kyua} also recognizes the following variables.  You should
not have to set them; they are only provided to override the value of
built-in values:

@table @env

@item KYUA_CONFDIR
@cindex KYUA_CONFDIR
Path to the system-wide configuration files for @command{kyua}.

Defaults to @file{@value{KYUA_CONFDIR}}.

@item KYUA_DOCDIR
@cindex KYUA_DOCDIR
Path to the location of installed documentation.

Defaults to @file{@value{KYUA_DOCDIR}}.

@item KYUA_LUADIR
@cindex KYUA_LUADIR
Path to the location of the installed Lua modules provided by @command{kyua}.

Defaults to @file{@value{KYUA_LUADIR}}.

@item KYUA_STOREDIR
@cindex kYUA_STOREDIR
Path to the location of the installed store support files; e.g. the
directory containing the SQL database schema.

Defaults to @file{@value{KYUA_STOREDIR}}.

@end table
