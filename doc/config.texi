@c Copyright 2011 Google Inc.
@c All rights reserved.
@c
@c Redistribution and use in source and binary forms, with or without
@c modification, are permitted provided that the following conditions are
@c met:
@c
@c * Redistributions of source code must retain the above copyright
@c   notice, this list of conditions and the following disclaimer.
@c * Redistributions in binary form must reproduce the above copyright
@c   notice, this list of conditions and the following disclaimer in the
@c   documentation and/or other materials provided with the distribution.
@c * Neither the name of Google Inc. nor the names of its contributors
@c   may be used to endorse or promote products derived from this software
@c   without specific prior written permission.
@c
@c THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
@c "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
@c LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
@c A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
@c OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
@c SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
@c LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
@c DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
@c THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
@c (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
@c OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@node Configuration
@chapter Configuration

@cindex configuration

The configuration of Kyua is a simple collection of key/value pairs
called configuration variables.  There are configuration variables
that have a special meaning to the runtime engine implemented by
@command{kyua}, and there are variables that only have meaning in the
context of particular test suites.

@menu
* Configuration resolution order::
* Configuration file syntax::
* Runtime configuration variables::
* Test-suite configuration variables::
@end menu

@node Configuration resolution order
@section Configuration resolution order

Configuration variables are first read from the configuration file,
which is either @file{~/.kyua/kyua.conf} if it exists, or otherwise
@file{@value{KYUA_CONFDIR}/kyua.conf}.  The user can override this
file by providing the generic @option{--config}.

Later, any overrides provided through the @option{--variable} option
are applied; in other words: values specified on the command line have
preference over values in the configuration file.

@node Configuration file syntax
@section Configuration file syntax

Configuration files are Lua scripts.  In their most basic form, their
whole purpose is to assign values to variables, but the user has the
freedom to implement any logic he desires to compute such values.

The general structure of a configuration file is:

@example
syntax('config', 1)

-- Assign internal variables.
architecture = 'foo'
platform = 'bar'

-- Assign test-suite variables.  All of these must be strings.
test_suites.NetBSD.file_systems = 'ffs ext2fs'
test_suites.X11.graphics_driver = 'vesa'
@end example

Note the syntax definition at the very beginning: this is not standard
practice in Lua scripts, but is in the context of Kyua.  This line
specifies the Kyua-specific functions to import as well as their
version.  The version is used to provide backwards compatibility.

You can find a sample configuration file in
@file{@value{KYUA_EGDIR}/kyua.conf}.

@node Runtime configuration variables
@section Runtime configuration variables

The variables described in this section have a special meaning within
Kyua and are internally recognized and processed by the tool.  These
variables are assigned in a free-form manner (i.e. without any prefix
nor wrapping function).

The following variables are recognized

@table @code
@item architecture
@cindex architecture variable
Name of the system architecture (aka processor type).

@item platform
@cindex platform variable
Name of the system platform (aka machine type).

@item unprivileged_user
@cindex unprivileged_user variable
The name or UID of the unprivileged user.

If set, this user must exist in the system and his privileges will be
used to run test cases that need regular privileges when Kyua is
executed as root.
@end table

@node Test-suite configuration variables
@section Test-suite configuration variables

Each test suite is able to recognize arbitrary configuration
variables, and their type and meaning is specific to the test suite.
@c TODO(jmmv): These variables are not discoverable.  Can we declare
@c these variables in some way so that we can expose them to the user?
@c Maybe declare them in the Kyuafiles?

@cindex test_suites map
Test-suite specific configuration variables are defined inside the
@code{test_suites} dictionary.  The general syntax is:

@example
test_suites.@var{test_suite_name}.@var{variable_name} = @var{value}
@end example

where @var{test_suite_name} is the name of the test suite,
@var{variable_name} is the name of the variable to set, and
@var{value} is a value.  The value can be a string, an integer or a
boolean.
