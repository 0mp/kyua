Introduction
============

Kyua uses the GNU Automake, GNU Autoconf and GNU Libtool utilities as
its build system.  These are used only when compiling the application
from the source code package.  If you want to install Kyua from a binary
package, you do not need to read this document.

For the impatient:

    $ ./configure
    $ make
    $ make check
    Gain root privileges
    # make install
    Drop root privileges
    $ make installcheck

Or alternatively, install as a regular user into your home directory:

    $ ./configure --prefix ~/local
    $ make
    $ make check
    $ make install
    $ make installcheck


Dependencies
============

To build and use Kyua successfully you need:

* A standards-compliant C++ complier.
* The Automated Testing Framework 0.11.
* pkg-config.

If you are building Kyua from the code on the repository, you will also
need the following tools:

* GNU Autoconf.
* GNU Automake.
* GNU Libtool.


Regenerating the build system
=============================

If you are building Kyua from code extracted from the repository, you must
first regenerate the files used by the build system.  You will also need to
do this if you modify configure.ac, Makefile.am or any of the other build
system files.  To do this, simply run:

  $ autoreconf -i -s

For formal releases, no extra steps are needed.


General build procedure
=======================

To build and install the source package, you must follow these steps:

1. Configure the sources to adapt to your operating system.  This is done
   using the 'configure' script located on the sources' top directory,
   and it is usually invoked without arguments unless you want to change
   the installation prefix.  More details on this procedure are given on a
   later section.

2. Build the sources to generate the binaries and scripts.  Simply run
   'make' on the sources' top directory after configuring them.  No
   problems should arise.

3. Install the program by running 'make install'.  You may need to become
   root to issue this step.

4. Issue any manual installation steps that may be required.  These are
   described later in their own section.

5. Check that the installed programs work by running 'make installcheck'.
   You do not need to be root to do this, even though some checks will not
   be run otherwise.


Configuration flags
===================

The most common, standard flags given to 'configure' are:

* --prefix=directory
  Possible values: Any path
  Default: /usr/local

  Specifies where the program (binaries and all associated files) will
  be installed.

* --sysconfdir=directory
  Possible values: Any path
  Default: /usr/local/etc

  Specifies where the installed programs will look for configuration files.
  '/kyua' will be appended to the given path unless KYUA_CONFSUBDIR is
  redefined as explained later on.

* --help
  Shows information about all available flags and exits immediately,
  without running any configuration tasks.

The following environment variables are specific to Kyua's 'configure'
script:

TODO(jmmv): Document this before releasing 0.1.

The following environment variables are specific to Kyua's 'configure'
script:

* KYUA_CONFSUBDIR
  Possible values: empty, a relative path.
  Default: kyua.

  Specifies the subdirectory of the configuration directory (given by the
  --sysconfdir argument) under which Kyua will search for its configuration
  files.

The following flags are specific to Kyua's 'configure' script:

* --enable-developer
  Possible values: yes, no
  Default: Depends on the version number.  Stable versions define this to
  'no' while all others have it set to 'yes'.

  Enables several features useful for development, such as the inclusion of
  debugging symbols in all objects or the enabling of warnings during
  compilation.

* --with-doxygen
  Possible values: yes, no, auto or a path.
  Default: auto.

  Enables usage of Doxygen to generate documentation for internal APIs.  This
  documentation is NOT installed and is only provided to help the developer of
  this package.  Therefore, enabling or disabling Doxygen causes absolutely no
  differences on the files installed by this package.

  Setting this to 'yes' causes the configure script to look for Doxygen
  unconditionally and abort if not found.  Setting this to 'auto' lets configure
  perform the best decision based on availability of Doxygen.  Setting this to
  'no' explicitly disables Doxygen usage.  And, lastly, setting this to a path
  forces configure to use a specific Doxygen binary, which must exist.
