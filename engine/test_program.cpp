// Copyright 2010, 2011 Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// * Neither the name of Google Inc. nor the names of its contributors
//   may be used to endorse or promote products derived from this software
//   without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <cstdlib>
#include <cstring>
#include <iostream>

#include "engine/exceptions.hpp"
#include "engine/test_case.hpp"
#include "engine/test_program.hpp"
#include "utils/defs.hpp"
#include "utils/format/macros.hpp"
#include "utils/logging/macros.hpp"
#include "utils/process/children.ipp"
#include "utils/process/exceptions.hpp"
#include "utils/sanity.hpp"

namespace process = utils::process;


namespace {


/// Splits a property line of the form "name: word1 [... wordN]".
///
/// \param line The line to parse.
///
/// \return A (property_name, property_value) pair.
///
/// \throw format_error If the value of line is invalid.
static std::pair< std::string, std::string >
split_prop_line(const std::string& line)
{
    const std::string::size_type pos = line.find(": ");
    if (pos == std::string::npos)
        throw engine::format_error("Invalid property line; expecting line of "
                                   "the form 'name: value'");
    return std::make_pair(line.substr(0, pos), line.substr(pos + 2));
}


/// Parses a set of consecutive property lines.
///
/// Processing stops when an empty line or the end of file is reached.  None of
/// these conditions indicate errors.
///
/// \param input The stream to read the lines from.
///
/// \return The parsed property lines.
///
/// throw format_error If the input stream has an invalid format.
static engine::properties_map
parse_properties(std::istream& input)
{
    engine::properties_map properties;

    std::string line;
    while (std::getline(input, line).good() && !line.empty()) {
        const std::pair< std::string, std::string > property = split_prop_line(
            line);
        if (properties.find(property.first) != properties.end())
            throw engine::format_error("Duplicate value for property " +
                                       property.first);
        properties.insert(property);
    }

    return properties;
}


/// Subprocess functor to invoke "test-program -l" to list test cases.
class list_test_cases {
    const utils::fs::path& _program;

public:
    /// Initializes the functor.
    ///
    /// \param Pointer to a list_test_cases_data object.
    list_test_cases(const utils::fs::path& program) :
        _program(program)
    {
    }

    /// Child process entry point.
    ///
    /// \post The process terminates.
    void
    operator()(void) UTILS_NORETURN
    {
        std::vector< std::string > args;
        args.push_back("-l");
        process::exec(_program, args);
    }
};


}  // anonymous namespace


/// Parses the list of test cases generated by a test program.
///
/// This method is exposed in the detail namespace to allow unit testing of the
/// parser without having to rely on a binary that generates the list.
///
/// \param program The name of the test program binary from which the test case
///     list is being extracted.
/// \param input An input stream that yields the list of test cases.
///
/// \return A collection of test_case objects representing the input test case
/// list.
///
/// \throw format_error If the test case list has an invalid format.
engine::test_cases_vector
engine::detail::parse_test_cases(const utils::fs::path& program,
                                 std::istream& input)
{
    std::string line;

    std::getline(input, line);
    if (line != "Content-Type: application/X-atf-tp; version=\"1\""
        || !input.good())
        throw format_error(F("Invalid header for test case list; expecting "
                             "Content-Type for application/X-atf-tp version 1, "
                             "got '%s'") % line);

    std::getline(input, line);
    if (!line.empty() || !input.good())
        throw format_error(F("Invalid header for test case list; expecting "
                             "a blank line, got '%s'") % line);

    test_cases_vector test_cases;
    while (std::getline(input, line).good()) {
        const std::pair< std::string, std::string > ident = split_prop_line(
            line);
        if (ident.first != "ident" or ident.second.empty())
            throw format_error("Invalid test case definition; must be "
                               "preceeded by the identifier");

        const engine::test_case_id identifier(program, ident.second);
        const properties_map raw_properties = parse_properties(input);
        test_cases.push_back(engine::test_case::from_properties(
            identifier, raw_properties));
    }
    if (test_cases.empty())
        throw format_error("No test cases");
    return test_cases;
}


/// Loads the list of test cases contained in a test program.
///
/// \param program The name of the test program binary from which the test case
///     list is being extracted.
///
/// \return A collection of test_case objects representing the input test case
/// list.
///
/// \throw engine::error If there is a problem executing the test program.
/// \throw format_error If the test case list has an invalid format.
engine::test_cases_vector
engine::load_test_cases(const utils::fs::path& program)
{
    LI(F("Obtaining test cases list from test program '%s'") % program);

    std::auto_ptr< process::child_with_output > child;

    try {
        child = process::child_with_output::fork(list_test_cases(program));
    } catch (const process::error& e) {
        // TODO(jmmv): This should be more representative.
        throw engine::error(e.what());
    }

    test_cases_vector test_cases;
    try {
        test_cases = detail::parse_test_cases(program, child->output());
    } catch (const format_error& e) {
        throw format_error(F("%s: %s") % program.str() % e.what());
    }

    const utils::process::status status = child->wait();
    if (!status.exited() || status.exitstatus() != EXIT_SUCCESS)
        throw error("Cannot get list of test cases; test program failed");

    return test_cases;
}
